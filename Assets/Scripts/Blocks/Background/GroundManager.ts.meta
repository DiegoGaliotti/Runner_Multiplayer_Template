fileFormatVersion: 2
guid: b44fb3c6e154f4e8ebfd4e80313b1c9a
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst
    UnityEngine_1 = require(\"UnityEngine\");\r\nconst GroundMoveLeft_1 = require(\"./GroundMoveLeft\");\r\n//
    Define the GroundManager class which extends the ZepetoScriptBehaviour class\r\nclass
    GroundManager extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        // Initial position of the ground\r\n       
    this.groundStartPos = new UnityEngine_1.Vector3(0, 0, 0);\r\n        // Speed
    of the ground movement\r\n        this.groundSpeed = 1;\r\n        // Flag indicating
    whether the ground is currently in the scene\r\n        this.isGroundInTheScene
    = false;\r\n        // X position at which the ground should be repeated\r\n       
    this.xleftBound = -30;\r\n        // Flag indicating whether the ground is currently
    moving\r\n        this.isGroundMoving = false;\r\n    }\r\n    // Awake is called
    when the script instance is being loaded\r\n    Awake() {\r\n        // Allocating
    the instance of this class to make it a \"singleton\"\r\n        if (ZEPETO_Script_1.ZepetoScriptBehaviour.op_Equality(GroundManager.Instance,
    null))\r\n            GroundManager.Instance = this;\r\n        else\r\n           
    UnityEngine_1.GameObject.Destroy(this);\r\n    }\r\n    // Method to start the
    ground manager\r\n    StartGroundManager() {\r\n        // Check if the ground
    is already in the scene\r\n        if (this.isGroundInTheScene == false) {\r\n           
    // Instantiate the ground prefab at the specified start position\r\n           
    this.movingGround = UnityEngine_1.GameObject.Instantiate(this.ground, this.groundStartPos,
    UnityEngine_1.Quaternion.identity);\r\n            this.isGroundInTheScene =
    true;\r\n        }\r\n        // Set the position of the moving ground to the
    initial position\r\n        this.movingGround.transform.position = this.groundStartPos;\r\n       
    // Get the GroundMoveLeft script attached to the moving ground\r\n        this.groundMoveLeft
    = this.movingGround.GetComponent($typeof(GroundMoveLeft_1.default));\r\n       
    // Get the current state of ground movement\r\n        this.isGroundMoving =
    this.groundMoveLeft.isMoving;\r\n    }\r\n    // Update is called once per frame\r\n   
    Update() {\r\n        // Check if the moving ground exists\r\n        if (this.movingGround)
    {\r\n            // Set the speed of the moving ground\r\n            this.groundMoveLeft.SetGroundSpeed(this.groundSpeed);\r\n           
    // Check if the ground position should be repeated\r\n            this.RepeatGround();\r\n       
    }\r\n    }\r\n    // Method to repeat the ground when it goes beyond a certain
    point\r\n    RepeatGround() {\r\n        // Check if the moving ground''s x-position
    is less than the left bound\r\n        if (this.movingGround.transform.position.x
    < this.xleftBound) {\r\n            // Reset the position of the moving ground
    to the initial position\r\n            this.movingGround.transform.position =
    this.groundStartPos;\r\n        }\r\n    }\r\n    // Method to pause the ground
    manager\r\n    PauseGroundManager() {\r\n        // Set the moving state of the
    ground to false\r\n        this.groundMoveLeft.SetMoving(false);\r\n    }\r\n   
    // Method to resume the ground manager\r\n    ResumeGroundManager() {\r\n       
    // Set the moving state of the ground to true\r\n        this.groundMoveLeft.SetMoving(true);\r\n   
    }\r\n}\r\nexports.default = GroundManager;\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3JvdW5kTWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkdyb3VuZE1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxpREFBcUQ7QUFDckQsNkNBQThEO0FBQzlELHFEQUE2QztBQUU3QywrRUFBK0U7QUFDL0UsTUFBcUIsYUFBYyxTQUFRLHFDQUFxQjtJQUFoRTs7UUFRSSxpQ0FBaUM7UUFDekIsbUJBQWMsR0FBWSxJQUFJLHFCQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2RCwrQkFBK0I7UUFDeEIsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFFL0IsK0RBQStEO1FBQ3ZELHVCQUFrQixHQUFZLEtBQUssQ0FBQztRQUU1QyxvREFBb0Q7UUFDN0MsZUFBVSxHQUFXLENBQUMsRUFBRSxDQUFDO1FBUWhDLHlEQUF5RDtRQUNqRCxtQkFBYyxHQUFZLEtBQUssQ0FBQztJQTRENUMsQ0FBQztJQTFERywyREFBMkQ7SUFDcEQsS0FBSztRQUNSLGlFQUFpRTtRQUNqRSxJQXJDQyxxQ0FBcUIsQ0E2RnEyRyxXQUFZLENBeERuNEcsYUFBYSxDQUFDLFFBQVEsRUFBSSxJQUFJO1lBQUUsYUFBYSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O1lBQzdELHdCQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxxQ0FBcUM7SUFDOUIsa0JBQWtCO1FBQ3JCLDhDQUE4QztRQUM5QyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxLQUFLLEVBQUU7WUFDbEMsZ0VBQWdFO1lBQ2hFLElBQUksQ0FBQyxZQUFZLEdBQUcsd0JBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLHdCQUFVLENBQUMsUUFBUSxDQUFlLENBQUM7WUFDaEgsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztTQUNsQztRQUVELGdFQUFnRTtRQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUUzRCw4REFBOEQ7UUFDOUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksU0FBQyx3QkFBYyxFQUFHLENBQUM7UUFFdkUsMkNBQTJDO1FBQzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7SUFDdkQsQ0FBQztJQUVELGtDQUFrQztJQUNsQyxNQUFNO1FBQ0Ysb0NBQW9DO1FBQ3BDLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixxQ0FBcUM7WUFDckMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRXJELGtEQUFrRDtZQUNsRCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDdkI7SUFDTCxDQUFDO0lBRUQsa0VBQWtFO0lBQzNELFlBQVk7UUFDZixzRUFBc0U7UUFDdEUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDMUQsa0VBQWtFO1lBQ2xFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1NBQzlEO0lBQ0wsQ0FBQztJQUVELHFDQUFxQztJQUM5QixrQkFBa0I7UUFDckIsOENBQThDO1FBQzlDLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxzQ0FBc0M7SUFDL0IsbUJBQW1CO1FBQ3RCLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0o7QUF2RkQsZ0NBdUZDIn0=","assetPath":"Assets/Scripts/Blocks/Background/GroundManager.ts","manifest":{"properties":[{"assembly":"UnityEngine.CoreModule","name":"ground","type":"UnityEngine.GameObject","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"groundSpeed","type":"System.Single","isArray":false,"initValue":["1"],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"xleftBound","type":"System.Single","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"GroundManager","description":"","hasAnimatorMove":false},"isCompiled":true}'
  typescriptHash: 8289a4514b97acc6eed86b55f2b96435
  onlyWriteTrigger: 0
